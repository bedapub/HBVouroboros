import os

# load config values from config/config.yaml
configfile: "config/config.yaml"

# include functions like parse_sample_annotation() from common.py
# this has to be done so early because the functions are required to parse values etc. 
include: "rules/common.py"

# paste config values from config-file into variables, they can be used in the other rule files
sample_annotation = config['sample_annotation']
biokit_outdir = config["biokit_outdir"]
samples, fq1dict, fq2dict = parse_sample_annotation(sample_annotation)
illumina_clip_file = config['illumina_clip_file']
illumina_clip_opts = config['illumina_clip_opts']
trimmomatic_steps = config['trimmomatic_steps']

rule_all_input_list = ["results/stats/samples.mapping.flagstat",
    "results/infref/infref_strain_dup.fasta",
    "results/coverage/infref/infref_genome_count.tsv",
    "results/coverage/infref/infref_genome_depth.tsv",
    "results/coverage/infref/infref_genome_gene_coverage.gct",
    "results/coverage/infref/infref_genome_CDS_coverage.gct",
    "results/coverage/infref/infref_genome_depth_mean.tsv",	    
    "results/coverage/infref/infref_genome_depth_mqc.png",
    expand("results/variant-calling/infref/infref_{sample}_cleaned_allelicprimitives.vcf", sample=samples),
    "results/multiqc/infref/infref_multiqc_report.html",
    expand("results/variant-calling-AA/infref/infref_{sample}.sorted.sam", sample = samples),
    expand("results/variant-calling-AA/infref/infref_{sample}.sam2AAFreq.done", sample = samples),
    "results/summary/infref_summary_report.html"]

if config['doInputRef'] == True:
	rule_all_input_list.extend(["results/coverage/inpt/inpt_genome_count.tsv",
	"results/coverage/inpt/inpt_genome_depth.tsv",
    "results/inpt/inpt_strain_dup.fasta",
    "results/coverage/inpt/inpt_genome_count.tsv",
    "results/coverage/inpt/inpt_genome_depth.tsv",
    "results/coverage/inpt/inpt_genome_gene_coverage.gct",
    "results/coverage/inpt/inpt_genome_CDS_coverage.gct",
    "results/coverage/inpt/inpt_genome_depth_mean.tsv",	
    "results/multiqc/inpt/inpt_multiqc_report.html",
    "results/coverage/inpt/inpt_genome_depth_mqc.png",
    expand("results/variant-calling/inpt/inpt_{sample}_cleaned_allelicprimitives.vcf", sample=samples),
    expand("results/variant-calling-AA/inpt/inpt_{sample}.sorted.sam", sample = samples),
    expand("results/variant-calling-AA/inpt/inpt_{sample}.sam2AAFreq.done", sample = samples),
    "results/summary/inpt_summary_report.html"])

if config['doPerSamp'] == True:
	rule_all_input_list.extend([expand("results/variant-calling/perSamp/{sample}/{sample}_cleaned_allelicprimitives.vcf", sample=samples), 
    expand("results/coverage/perSamp/{sample}_genome_depth.tsv", sample=samples), 
    expand("results/coverage/perSamp/{sample}_genome_count.tsv", sample=samples), 
    expand("results/coverage/perSamp/{sample}_genome_gene_coverage.gct", sample=samples), 
    expand("results/coverage/perSamp/{sample}_genome_CDS_coverage.gct", sample=samples),
    expand("results/variant-calling-AA/perSamp/{sample}/{sample}.sorted.sam", sample=samples),
    expand("results/variant-calling-AA/perSamp/{sample}/{sample}.sam2AAFreq.done", sample=samples),
    "results/summary/perSamp_summary_report.html",
    "results/multiqc/perSamp/perSamp_multiqc_report.html"])

#include the rules from the other files
include: "rules/build_refgenomes.smk"
include: "rules/align_reads.smk"
include: "rules/varscan_vc.smk"
include: "rules/fastqc_multiqc.smk"
include: "rules/AA_vc.smk"
include: "rules/summary_report.smk"

rule all:
	input:
		rule_all_input_list
